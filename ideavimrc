"" Source your .vimrc
"source ~/.vimrc

let mapleader=" "
"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=8

" Do incremental searching.
set incsearch

" Don't use Ex mode, use Q for formatting.
map Q gq

set ideajoin

" Causes problems with some mappings
"source ~/.vim/vimrc

""" runtime/defaults.vim
set showcmd
" set wildmenu
set nrformats-=octal
map Q gq

""" vim-sensible settings that work in IdeaVim
set nrformats-=octal
nnoremap <silent> <C-L> :nohlsearch<CR>
set sidescrolloff=5
set history=1000   " overrides the 200 in defaults.vim

""" My stuff
set clipboard^=unnamedplus,unnamed

set hlsearch
set ignorecase
set smartcase
set visualbell
set surround
set ReplaceWithRegister
set nu

set showmode
set number relativenumber

" Toggle case and start typing. E.g. `<leader>iget`: `property` -> `getProperty`
nmap <leader>i ~hi
" Remove selection and toggle case. E.g. `v2l<leader>u`: `getProperty` -> `property`
vmap <leader>u d~h


""" IdeaVim options
" Smart join for <C-J>
set ideajoin
" Map vim marks to IDEA global marks
set ideamarks


""" IdeaVim actions
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

" Keys from vim-gitgutter
nmap ]c <Action>(VcsShowNextChangeMarker)
nmap [c <Action>(VcsShowPrevChangeMarker)
" Not from vim-gitgutter. ={motion} is for indenting. =c does nothing
nmap =c <Action>(VcsShowCurrentChangeMarker)

" These don't work in Rider, annoyingly. Try HighlightUsagesInFile (see <leader>h below)
nmap ]q <Action>(GotoNextElementUnderCaretUsage)
nmap [q <Action>(GotoPrevElementUnderCaretUsage)

nmap gb <Action>(Back)
nmap gD <Action>(GotoTypeDeclaration)
nmap gf <Action>(Forward)
nmap gl <Action>(QuickJavaDoc)
nmap gL <Action>(QuickImplementations)
nmap gy <Action>(ShowErrorDescription)

nmap <leader>b <Action>(ToggleLineBreakpoint)
nmap <leader>c <Action>(CallHierarchy)
" Highlight usages, use CMD+G/Shift+CMD+G to iterate
nmap <leader>h <Action>(HighlightUsagesInFile)
nmap <leader>n <Action>(ReSharperNavigateTo)
nmap <leader>q <Action>(ToggleRenderedDocPresentation)
nmap <leader>r <Action>(Refactorings.QuickListPopupAction)
nmap <leader>s <Action>(ShowUsages)
nmap <leader>t <Action>(TypeHierarchy)
nmap <leader>u <Action>(FindUsages)
nmap <leader>v <Action>(Vcs.QuickListPopupAction)
nmap <leader>x <Action>(HideAllWindows)

nmap J mzJ`z
nmap <C-d> <C-d>zz
nmap <C-u> <C-u>zz
nmap n nzzzv
nmap N Nzzzv

-- greatest remap ever
xmap <leader>p [["_dP]]

""" IdeaVim plugins

packadd matchit		" Extended matching. Supports % (matching motion) and g% (reverse motion)

Plug 'easymotion/vim-easymotion'	# Requires IdeaVim-EasyMotion. Lots of mappings
Plug 'kana/vim-textobj-entire'		# entire buffer text object: ae
Plug 'machakann/vim-highlightedyank'
Plug 'terryma/vim-multiple-cursors'	# See below for remapped keys. <A-n> doesn't work on Mac
Plug 'tommcdo/vim-exchange'		    # cx{motion} to select, again to exchange
Plug 'tpope/vim-commentary'		    # [count]gc{motion}, o_gc, v_gc, gcc
Plug 'tpope/vim-surround'		    # ys, cs, ds, S
Plug 'vim-scripts/argtextobj.vim'	    # argument text objects: aa, ia
Plug 'vim-scripts/ReplaceWithRegister'  # [count]["x]gr{motion}, [count]["x]grr, {Visual}["x]gr

" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
nmap <leader><C-n> <Plug>AllWholeOccurrences
xmap <leader><C-n> <Plug>AllWholeOccurrences
nmap <leader>g<C-n> <Plug>AllOccurrences
xmap <leader>g<C-n> <Plug>AllOccurrences

"Search

" CamelCaseMotion approximation (obsolete with proper CamelCaseMotoin plugin)
" Missing inner word motions e.g. i<leader>w
nmap <leader>w [w
nmap <leader>b [b
nmap <leader>e ]w
nmap <leader>ge ]b

function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction

nnoremap ! :call Invert(0)<CR>
vnoremap ! :<C-u>call Invert(1)<CR>

""" IdeaVim development stuff
set ideastrictmode

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)


" Find more examples here: https://jb.gg/share-ideavimrc
